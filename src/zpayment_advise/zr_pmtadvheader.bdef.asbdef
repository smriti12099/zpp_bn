managed;
strict ( 2 );

define behavior for ZR_PMTADVHEADER alias PMTADVHEADER
implementation in class zbp_r_pmtadvheader unique
persistent table zpmtadvheader
early numbering
lock master
etag master LastChangedAt
authorization master ( global )
{

   field ( readonly )
   CreatedBy,
   CreatedAt,
   LastChangedAt;

   field ( readonly : update )
   GRNDate,
   GRNNumber,
   InvoiceNumber,
   InvoiceDate,
   PaymentAdviseNumber;


    static action createPMTADVCData parameter ZI_PAYMENTADVICE result [1] $self;

  create;
  update;
  delete;

  mapping for zpmtadvheader
  {
    PaymentAdviseNumber = pmtadvno;
    BargainDate = bargaindate;
    BargainNumber = bargainno;
    BrokerName = brokername;
    CreatedAt = created_at;
    CreatedBy= created_by;
    DueDate = duedate;
    GRNDate =grndate;
    GRNNumber = grnno;
    InspectionLot = inspectionlot;
    InvoiceDate = invoicedate;
    InvoiceNumber= invoiceno;
    LastChangedAt = last_changed_at;
    LastChangedBy = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
    PONumber = ponumber;
    Place  = place;
    SupplierName = suppliername;
    VehicleNumber = vehicleno;
  }


  association _PmtAmtBDSumm { create; }
  association _PmtAmtDeduct { create; }
  association _PmtAdvMtSumm { create; }
}

define behavior for ZR_PMTADVBDSUMM alias PMTADVBDSUMM
persistent table zpmtadvbdsumm
etag master LocalLastChangedAt
lock dependent by _PmtAdvHeader
authorization dependent by _PmtAdvHeader
{
  field ( readonly ) PaymentAdviseNumber;
  field ( readonly: update ) ItemNo;


  update;
  delete;

  mapping for zpmtadvbdsumm
  {
  ItemNo= itemno;
  BDNetWeight = bdnwt;
  BDNetWeightUOM = bdnwtuom;
  BDUnitWeight = bdnunitwt;
  BDUnitWeightUOM = bdnunitwtuom;
  BagsUOM = bagsuom;
  MSNetWeight = msnetwt;
  MSNetWeightUOM = mswtuom;
  Material = material;
  PaymentAdviseNumber = pmtadvno;
  ReceivedBags = rcvdbags;
  WeightPerBag = wtperbag;
  WeightPerBaguom = wtperbaguom;
   CreatedAt = created_at;
    CreatedBy= created_by;
    LastChangedAt = last_changed_at;
    LastChangedBy = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
  }

  association _PmtAdvHeader;
}

define behavior for ZR_PMTADVDEDUCT alias PMTADVDEDUCT
persistent table zpmtadvdeduct
lock dependent by _PmtAdvHeader
authorization dependent by _PmtAdvHeader
etag master LocalLastChangedAt
{
  field ( readonly ) PaymentAdviseNumber;
  field ( readonly: update ) ItemNo,Particulars;
  update;
  delete;

  mapping for zpmtadvdeduct
  {
      ItemNo= itemno;
      Actual = actual;
      ConditionNumber = cond;
      Currency = currency;
      DeductionAmount = deducamt;
      Remarks = remarks;
      Difference = diff;
      Final = final;
      Particulars = particulars;
      Type = type;
      PaymentAdviseNumber = pmtadvno;
      CreatedAt = created_at;
        CreatedBy= created_by;
        LastChangedAt = last_changed_at;
        LastChangedBy = last_changed_by;
        LocalLastChangedAt = local_last_changed_at;
  }

  association _PmtAdvHeader;
}


define behavior for ZR_PMTADVMTSUMM alias ZrPmtadvmtsumm
persistent table ZPMTADVMTSUMM
lock dependent by _PMTADVHEADER
authorization dependent by _PMTADVHEADER

{
  field ( readonly )
   CreatedBy,
   CreatedAt,
   LastChangedBy,
   LastChangedAt,
   LocalLastChangedAt;

  field ( readonly : update )
   PaymentAdviseNumber;


  update;
  delete;


  mapping for ZPMTADVMTSUMM
  {
    PaymentAdviseNumber = pmtadvno;
    Material = material;
    Invbags = invbags;
    Rcvdbags = rcvdbags;
    Invwt = invwt;
    Rcvdwt = rcvdwt;
    Shortwt = shortwt;
    Msnetwt = msnetwt;
    Invrate = invrate;
    Invtaxableamt = invtaxableamt;
    Rcvdgr = rcvdgr;
    Rcvdtr = rcvdtr;
    Rcvdnt = rcvdnt;
    Currency = currency;
    Bagsuom = bagsuom;
    Wtuom = wtuom;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
    LocalLastChangedAt = local_last_changed_at;
  }

  association _PMTADVHEADER;
}